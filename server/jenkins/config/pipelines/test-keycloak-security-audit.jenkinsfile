/**
 * Keycloak Security Audit Integration Test Pipeline
 * 
 * Tests security audit functions: inactive users, unverified emails, report generation
 */

def keycloakAuth
def keycloakAudit

pipeline {
    agent any
    
    parameters {
        choice(
            name: 'REALM',
            choices: ['internal'],
            description: 'Keycloak realm to test'
        )
    }
    
    environment {
        KC_URL_INTERNAL = "${KC_URL_INTERNAL}"
        KC_CLIENT_ID = "${KC_CLIENT_ID_JENKINS_AUTOMATION}"
        KC_CLIENT_SECRET = "${KC_SECRET_JENKINS_AUTOMATION}"
    }
    
    stages {
        stage('Load Libraries') {
            steps {
                script {
                    keycloakAuth = load '/var/jenkins_home/workflow-libs/keycloak-lib/vars/keycloakAuth.groovy'
                    keycloakAudit = load '/var/jenkins_home/workflow-libs/keycloak-lib/vars/keycloakAudit.groovy'
                    echo "‚úÖ Libraries loaded"
                }
            }
        }
        
        stage('üîê Authenticate') {
            steps {
                script {
                    echo "=" * 60
                    echo "Authenticating to Keycloak..."
                    echo "=" * 60
                    
                    env.ACCESS_TOKEN = keycloakAuth.getServiceAccountToken(
                        keycloakUrl: env.KC_URL_INTERNAL,
                        clientId: env.KC_CLIENT_ID,
                        clientSecret: env.KC_CLIENT_SECRET,
                        realm: params.REALM
                    )
                    
                    echo "‚úÖ Authentication successful"
                }
            }
        }
        
        stage('üìä Test 1: Gather User Statistics') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 1: Gathering user statistics..."
                    echo "=" * 60
                    
                    try {
                        def stats = keycloakAudit.getUserStatistics(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM
                        )
                        
                        echo "‚úÖ Statistics gathered successfully"
                        echo "\nüìä User Statistics:"
                        echo "   Total users: ${stats.totalUsers}"
                        echo "   Enabled users: ${stats.enabledUsers}"
                        echo "   Disabled users: ${stats.disabledUsers}"
                        echo "   Verified emails: ${stats.verifiedEmails}"
                        echo "   Unverified emails: ${stats.unverifiedEmails}"
                        
                        env.TOTAL_USERS = stats.totalUsers.toString()
                    } catch (Exception e) {
                        error("‚ùå Failed to gather statistics: ${e.message}")
                    }
                }
            }
        }
        
        stage('‚ö†Ô∏è Test 2: Find Inactive Users') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 2: Finding inactive users..."
                    echo "=" * 60
                    
                    try {
                        def inactiveUsers = keycloakAudit.findInactiveUsers(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            inactiveDays: 90
                        )
                        
                        echo "‚úÖ Inactive users analysis completed"
                        echo "   Users inactive for 90+ days: ${inactiveUsers.size()}"
                        
                        if (inactiveUsers.size() > 0) {
                            echo "\n   Sample inactive users:"
                            inactiveUsers.take(5).each { user ->
                                echo "   - ${user.username} (Last login: ${user.lastLogin ?: 'Never'})"
                            }
                        }
                    } catch (Exception e) {
                        error("‚ùå Failed to find inactive users: ${e.message}")
                    }
                }
            }
        }
        
        stage('üìß Test 3: Find Unverified Emails') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 3: Finding users with unverified emails..."
                    echo "=" * 60
                    
                    try {
                        def unverifiedUsers = keycloakAudit.findUnverifiedEmails(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM
                        )
                        
                        echo "‚úÖ Unverified emails analysis completed"
                        echo "   Users with unverified emails: ${unverifiedUsers.size()}"
                        
                        if (unverifiedUsers.size() > 0) {
                            echo "\n   Sample users:"
                            unverifiedUsers.take(5).each { user ->
                                echo "   - ${user.username} (${user.email})"
                            }
                        }
                    } catch (Exception e) {
                        error("‚ùå Failed to find unverified emails: ${e.message}")
                    }
                }
            }
        }
        
        stage('üîê Test 4: Check Password Policies') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 4: Checking password policies..."
                    echo "=" * 60
                    
                    try {
                        def policies = keycloakAudit.checkPasswordPolicies(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM
                        )
                        
                        echo "‚úÖ Password policies retrieved"
                        echo "\nüîê Password Policy Configuration:"
                        echo "   Minimum length: ${policies.minLength ?: 'Not configured'}"
                        echo "   Require digits: ${policies.requireDigits ?: 'No'}"
                        echo "   Require lowercase: ${policies.requireLowercase ?: 'No'}"
                        echo "   Require uppercase: ${policies.requireUppercase ?: 'No'}"
                        echo "   Require special chars: ${policies.requireSpecial ?: 'No'}"
                        echo "   Password history: ${policies.historyCount ?: '0'}"
                    } catch (Exception e) {
                        error("‚ùå Failed to check password policies: ${e.message}")
                    }
                }
            }
        }
        
        stage('üìù Test 5: Generate Security Report (JSON)') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 5: Generating JSON security report..."
                    echo "=" * 60
                    
                    try {
                        def jsonReport = keycloakAudit.generateSecurityReport(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            format: 'json',
                            inactiveDaysThreshold: 90
                        )
                        
                        // Save report
                        writeFile file: "security-report-${BUILD_NUMBER}.json", text: jsonReport
                        
                        echo "‚úÖ JSON report generated"
                        echo "   File: security-report-${BUILD_NUMBER}.json"
                        
                        // Archive the report
                        archiveArtifacts artifacts: "security-report-${BUILD_NUMBER}.json", fingerprint: true
                        
                    } catch (Exception e) {
                        error("‚ùå Failed to generate JSON report: ${e.message}")
                    }
                }
            }
        }
        
        stage('üìä Test 6: Generate Security Report (HTML)') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 6: Generating HTML security report..."
                    echo "=" * 60
                    
                    try {
                        def htmlReport = keycloakAudit.generateSecurityReport(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            format: 'html',
                            inactiveDaysThreshold: 90,
                            inactiveUsersThreshold: 50,
                            unverifiedEmailThreshold: 20
                        )
                        
                        // Save report
                        writeFile file: "security-report-${BUILD_NUMBER}.html", text: htmlReport
                        
                        echo "‚úÖ HTML report generated"
                        echo "   File: security-report-${BUILD_NUMBER}.html"
                        
                        // Publish HTML report
                        publishHTML(target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: '.',
                            reportFiles: "security-report-${BUILD_NUMBER}.html",
                            reportName: 'Security Audit Report'
                        ])
                        
                        echo "‚úÖ Report published to Jenkins"
                        
                    } catch (Exception e) {
                        error("‚ùå Failed to generate HTML report: ${e.message}")
                    }
                }
            }
        }
        
        stage('üéØ Test 7: Calculate Security Score') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 7: Calculating security score..."
                    echo "=" * 60
                    
                    try {
                        def score = keycloakAudit.calculateSecurityScore(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            inactiveDaysThreshold: 90
                        )
                        
                        echo "‚úÖ Security score calculated"
                        echo "\nüéØ Security Score: ${score.totalScore}/100"
                        echo "\n   Breakdown:"
                        echo "   - Active users score: ${score.activeUsersScore}/30"
                        echo "   - Email verification score: ${score.emailVerificationScore}/20"
                        echo "   - Password policy score: ${score.passwordPolicyScore}/30"
                        echo "   - MFA adoption score: ${score.mfaScore}/20"
                        
                        def rating = score.totalScore >= 80 ? "üü¢ Excellent" : 
                                    score.totalScore >= 60 ? "üü° Good" :
                                    score.totalScore >= 40 ? "üü† Fair" : "üî¥ Poor"
                        
                        echo "\n   Overall Rating: ${rating}"
                        
                    } catch (Exception e) {
                        error("‚ùå Failed to calculate score: ${e.message}")
                    }
                }
            }
        }
        
        stage('üîç Test 8: Find Security Issues') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 8: Finding security issues..."
                    echo "=" * 60
                    
                    try {
                        def issues = keycloakAudit.findSecurityIssues(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            inactiveDaysThreshold: 90
                        )
                        
                        echo "‚úÖ Security issues identified"
                        echo "\n‚ö†Ô∏è Security Issues Found: ${issues.size()}"
                        
                        if (issues.size() > 0) {
                            issues.each { issue ->
                                def severity = issue.severity == 'HIGH' ? 'üî¥' : 
                                             issue.severity == 'MEDIUM' ? 'üü†' : 'üü°'
                                echo "\n   ${severity} ${issue.title}"
                                echo "      Category: ${issue.category}"
                                echo "      Impact: ${issue.description}"
                                echo "      Affected: ${issue.count} ${issue.type}"
                            }
                        } else {
                            echo "\n‚úÖ No critical security issues found!"
                        }
                        
                    } catch (Exception e) {
                        error("‚ùå Failed to find security issues: ${e.message}")
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "\n" + "=" * 60
            echo "‚úÖ ALL TESTS PASSED"
            echo "=" * 60
            echo "\nSecurity Audit Integration Tests Summary:"
            echo "‚úÖ Gather user statistics"
            echo "‚úÖ Find inactive users"
            echo "‚úÖ Find unverified emails"
            echo "‚úÖ Check password policies"
            echo "‚úÖ Generate JSON report"
            echo "‚úÖ Generate HTML report"
            echo "‚úÖ Calculate security score"
            echo "‚úÖ Find security issues"
            echo "\nüéâ Keycloak Security Audit is fully functional!"
            echo "\nüìä Reports available:"
            echo "   - JSON: security-report-${BUILD_NUMBER}.json"
            echo "   - HTML: Published in Jenkins"
        }
        failure {
            echo "\n" + "=" * 60
            echo "‚ùå TESTS FAILED"
            echo "=" * 60
            echo "\n‚ö†Ô∏è  Check the logs above for details"
        }
        always {
            echo "\nTest completed at: ${new Date()}"
        }
    }
}
