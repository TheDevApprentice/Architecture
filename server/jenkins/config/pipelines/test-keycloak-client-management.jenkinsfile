/**
 * Keycloak Client Management Integration Test Pipeline
 * 
 * Tests client operations: CRUD, secret management, OIDC/SAML clients
 */

def keycloakAuth
def keycloakClient

pipeline {
    agent any
    
    parameters {
        choice(
            name: 'REALM',
            choices: ['internal'],
            description: 'Keycloak realm to test'
        )
    }
    
    environment {
        KC_URL_INTERNAL = "${KC_URL_INTERNAL}"
        KC_CLIENT_ID = "${KC_CLIENT_ID_JENKINS_AUTOMATION}"
        KC_CLIENT_SECRET = "${KC_SECRET_JENKINS_AUTOMATION}"
        TEST_CLIENT_ID = "test-client-${BUILD_NUMBER}"
        TEST_PUBLIC_CLIENT = "test-public-client-${BUILD_NUMBER}"
    }
    
    stages {
        stage('Load Libraries') {
            steps {
                script {
                    keycloakAuth = load '/var/jenkins_home/workflow-libs/keycloak-lib/vars/keycloakAuth.groovy'
                    keycloakClient = load '/var/jenkins_home/workflow-libs/keycloak-lib/vars/keycloakClient.groovy'
                    echo "‚úÖ Libraries loaded"
                }
            }
        }
        
        stage('üîç Keycloak Connectivity') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 1: Checking Keycloak connectivity..."
                    echo "=" * 60
                    
                    try {
                        def wellKnownUrl = "http://${env.KC_URL_INTERNAL}/realms/${params.REALM}/.well-known/openid-configuration"
                        def response = sh(
                            script: "curl -s -o /dev/null -w '%{http_code}' ${wellKnownUrl}",
                            returnStdout: true
                        ).trim()
                        
                        if (response == '200') {
                            echo "‚úÖ Keycloak is accessible"
                            // echo "DEV : URL: ${wellKnownUrl}"
                        } else {
                            error("‚ùå Keycloak returned HTTP ${response}")
                        }
                    } catch (Exception e) {
                        error("‚ùå Failed to connect to Keycloak: ${e.message}")
                    }
                }
            }
        }
        
        stage('üîê Service Account Authentication') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 2: Authenticating to Keycloak..."
                    echo "=" * 60
                    
                    env.ACCESS_TOKEN = keycloakAuth.getServiceAccountToken(
                        keycloakUrl: env.KC_URL_INTERNAL,
                        clientId: env.KC_CLIENT_ID,
                        clientSecret: env.KC_CLIENT_SECRET,
                        realm: params.REALM
                    )
                    
                    echo "‚úÖ Authentication successful"
                }
            }
        }
        
        stage('üìã Test 1: List Clients') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 1: Listing existing clients..."
                    echo "=" * 60
                    
                    try {
                        def clients = keycloakClient.listClients(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM
                        )
                        
                        echo "‚úÖ Clients listed successfully"
                        echo "   Total clients: ${clients.size()}"
                        
                        if (clients.size() > 0) {
                            echo "\n   Sample clients:"
                            clients.take(5).each { client ->
                                echo "   - ${client.clientId} (Protocol: ${client.protocol})"
                            }
                        }
                    } catch (Exception e) {
                        error("‚ùå Failed to list clients: ${e.message}")
                    }
                }
            }
        }
        
        stage('‚ûï Test 2: Create Confidential Client') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 2: Creating confidential OIDC client..."
                    echo "=" * 60
                    
                    try {
                        env.TEST_CLIENT_UUID = keycloakClient.createClient(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            clientId: env.TEST_CLIENT_ID,
                            protocol: 'openid-connect',
                            publicClient: false,
                            redirectUris: [
                                'http://localhost:3000/*',
                                'https://test.example.com/*'
                            ],
                            webOrigins: [
                                'http://localhost:3000',
                                'https://test.example.com'
                            ],
                            description: 'Test confidential client',
                            serviceAccountsEnabled: true
                        )
                        
                        echo "‚úÖ Confidential client created"
                        echo "   Client ID: ${env.TEST_CLIENT_ID}"
                        echo "   UUID: ${env.TEST_CLIENT_UUID}"
                    } catch (Exception e) {
                        error("‚ùå Failed to create client: ${e.message}")
                    }
                }
            }
        }
        
        stage('‚ûï Test 3: Create Public Client (SPA)') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 3: Creating public client (SPA)..."
                    echo "=" * 60
                    
                    try {
                        env.TEST_PUBLIC_CLIENT_UUID = keycloakClient.createClient(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            clientId: env.TEST_PUBLIC_CLIENT,
                            protocol: 'openid-connect',
                            publicClient: true,
                            redirectUris: ['http://localhost:8080/*'],
                            webOrigins: ['http://localhost:8080'],
                            description: 'Test public client (SPA)'
                        )
                        
                        echo "‚úÖ Public client created"
                        echo "   Client ID: ${env.TEST_PUBLIC_CLIENT}"
                        echo "   UUID: ${env.TEST_PUBLIC_CLIENT_UUID}"
                    } catch (Exception e) {
                        error("‚ùå Failed to create public client: ${e.message}")
                    }
                }
            }
        }
        
        stage('üîç Test 4: Get Client Details') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 4: Retrieving client details..."
                    echo "=" * 60
                    
                    try {
                        def clientDetails = keycloakClient.getClient(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            clientId: env.TEST_CLIENT_ID
                        )
                        
                        echo "‚úÖ Client details retrieved"
                        echo "   Client ID: ${clientDetails.clientId}"
                        echo "   Protocol: ${clientDetails.protocol}"
                        echo "   Public: ${clientDetails.publicClient}"
                        echo "   Redirect URIs: ${clientDetails.redirectUris}"
                    } catch (Exception e) {
                        error("‚ùå Failed to get client: ${e.message}")
                    }
                }
            }
        }
        
        stage('üîë Test 5: Get Client Secret') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 5: Retrieving client secret..."
                    echo "=" * 60
                    
                    try {
                        def secret = keycloakClient.getClientSecret(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            clientId: env.TEST_CLIENT_ID
                        )
                        
                        if (secret) {
                            echo "‚úÖ Client secret retrieved"
                            echo "   Secret length: ${secret.length()} characters"
                            env.ORIGINAL_SECRET = secret
                        } else {
                            error("‚ùå No secret returned")
                        }
                    } catch (Exception e) {
                        error("‚ùå Failed to get secret: ${e.message}")
                    }
                }
            }
        }
        
        stage('üîÑ Test 6: Regenerate Client Secret') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 6: Regenerating client secret..."
                    echo "=" * 60
                    
                    try {
                        def newSecret = keycloakClient.regenerateSecret(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            clientId: env.TEST_CLIENT_ID
                        )
                        
                        echo "‚úÖ Secret regenerated successfully"
                        echo "   New secret length: ${newSecret.length()} characters"
                        
                        if (newSecret != env.ORIGINAL_SECRET) {
                            echo "‚úÖ Secret changed (as expected)"
                        } else {
                            error("‚ùå Secret did not change")
                        }
                    } catch (Exception e) {
                        error("‚ùå Failed to regenerate secret: ${e.message}")
                    }
                }
            }
        }
        
        stage('‚úèÔ∏è Test 7: Update Client') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 7: Updating client configuration..."
                    echo "=" * 60
                    
                    try {
                        keycloakClient.updateClient(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            clientId: env.TEST_CLIENT_ID,
                            enabled: true,
                            description: 'Updated test client',
                            redirectUris: [
                                'http://localhost:3000/*',
                                'https://test.example.com/*',
                                'https://new-url.example.com/*'
                            ]
                        )
                        
                        echo "‚úÖ Client updated successfully"
                    } catch (Exception e) {
                        error("‚ùå Failed to update client: ${e.message}")
                    }
                }
            }
        }
        
        stage('üî¥ Test 8: Disable/Enable Client') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 8: Testing disable/enable client..."
                    echo "=" * 60
                    
                    try {
                        // Disable
                        keycloakClient.setClientEnabled(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            clientId: env.TEST_CLIENT_ID,
                            enabled: false
                        )
                        echo "‚úÖ Client disabled"
                        
                        sleep(2)
                        
                        // Enable
                        keycloakClient.setClientEnabled(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            clientId: env.TEST_CLIENT_ID,
                            enabled: true
                        )
                        echo "‚úÖ Client re-enabled"
                        
                    } catch (Exception e) {
                        error("‚ùå Failed to toggle client status: ${e.message}")
                    }
                }
            }
        }
        
        stage('üóëÔ∏è Test 9: Cleanup') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 9: Cleaning up test clients..."
                    echo "=" * 60
                    
                    try {
                        // Delete confidential client
                        keycloakClient.deleteClient(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            clientId: env.TEST_CLIENT_ID
                        )
                        echo "‚úÖ Confidential client deleted"
                        
                        // Delete public client
                        keycloakClient.deleteClient(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            clientId: env.TEST_PUBLIC_CLIENT
                        )
                        echo "‚úÖ Public client deleted"
                        
                        echo "\n‚úÖ All test clients cleaned up"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Cleanup warning: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "\n" + "=" * 60
            echo "‚úÖ ALL TESTS PASSED"
            echo "=" * 60
            echo "\nClient Management Integration Tests Summary:"
            echo "‚úÖ List clients"
            echo "‚úÖ Create confidential client (OIDC)"
            echo "‚úÖ Create public client (SPA)"
            echo "‚úÖ Get client details"
            echo "‚úÖ Get client secret"
            echo "‚úÖ Regenerate client secret"
            echo "‚úÖ Update client"
            echo "‚úÖ Disable/Enable client"
            echo "‚úÖ Cleanup"
            echo "\nüéâ Keycloak Client Management is fully functional!"
        }
        failure {
            echo "\n" + "=" * 60
            echo "‚ùå TESTS FAILED"
            echo "=" * 60
            echo "\n‚ö†Ô∏è  Check the logs above for details"
        }
        always {
            script {
                echo "\nTest completed at: ${new Date()}"

                // Clean sensitive data
                env.ACCESS_TOKEN = null
                env.TEST_CLIENT_UUID = null
                env.TEST_PUBLIC_CLIENT_UUID = null
            }
        }
    }
}
