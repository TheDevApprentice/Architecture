/**
 * Keycloak Session Management Integration Test Pipeline
 * 
 * Tests session operations: list, revoke, statistics, anomaly detection
 */

def keycloakAuth
def keycloakSession
def keycloakAudit
def keycloakUser

pipeline {
    agent any
    
    parameters {
        choice(
            name: 'REALM',
            choices: ['internal'],
            description: 'Keycloak realm to test'
        )
    }
    
    environment {
        KC_URL_INTERNAL = "${KC_URL_INTERNAL}"
        KC_CLIENT_ID = "${KC_CLIENT_ID_JENKINS_AUTOMATION}"
        KC_CLIENT_SECRET = "${KC_SECRET_JENKINS_AUTOMATION}"
        TEST_USERNAME = "test-session-user-${BUILD_NUMBER}"
    }
    
    stages {
        stage('Load Libraries') {
            steps {
                script {
                    keycloakAuth = load '/var/jenkins_home/workflow-libs/keycloak-lib/vars/keycloakAuth.groovy'
                    keycloakSession = load '/var/jenkins_home/workflow-libs/keycloak-lib/vars/keycloakSession.groovy'
                    keycloakAudit = load '/var/jenkins_home/workflow-libs/keycloak-lib/vars/keycloakAudit.groovy'
                    keycloakUser = load '/var/jenkins_home/workflow-libs/keycloak-lib/vars/keycloakUser.groovy'
                    echo "‚úÖ Libraries loaded"
                }
            }
        }
        
        stage('üîç Keycloak Connectivity') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 1: Checking Keycloak connectivity..."
                    echo "=" * 60
                    
                    try {
                        def wellKnownUrl = "http://${env.KC_URL_INTERNAL}/realms/${params.REALM}/.well-known/openid-configuration"
                        def response = sh(
                            script: "curl -s -o /dev/null -w '%{http_code}' ${wellKnownUrl}",
                            returnStdout: true
                        ).trim()
                        
                        if (response == '200') {
                            echo "‚úÖ Keycloak is accessible"
                            // echo "DEV : URL: ${wellKnownUrl}"
                        } else {
                            error("‚ùå Keycloak returned HTTP ${response}")
                        }
                    } catch (Exception e) {
                        error("‚ùå Failed to connect to Keycloak: ${e.message}")
                    }
                }
            }
        }
        
        stage('üîê Service Account Authentication') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 2: Authenticating to Keycloak..."
                    echo "=" * 60
                    
                    env.ACCESS_TOKEN = keycloakAuth.getServiceAccountToken(
                        keycloakUrl: env.KC_URL_INTERNAL,
                        clientId: env.KC_CLIENT_ID,
                        clientSecret: env.KC_CLIENT_SECRET,
                        realm: params.REALM
                    )
                    
                    echo "‚úÖ Authentication successful"
                }
            }
        }
        
        stage('üë§ Setup: Create Test User') {
            steps {
                script {
                    echo "=" * 60
                    echo "SETUP: Creating test user for session testing..."
                    echo "=" * 60
                    
                    try {
                        env.TEST_USER_ID = keycloakUser.createUser(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            username: env.TEST_USERNAME,
                            email: "${env.TEST_USERNAME}@test.local",
                            password: "changeMe123!",
                            enabled: true,
                            emailVerified: true
                        )
                        
                        echo "‚úÖ Test user created"
                        echo "   Username: ${env.TEST_USERNAME}"
                        echo "   User ID: ${env.TEST_USER_ID}"
                    } catch (Exception e) {
                        error("‚ùå Failed to create test user: ${e.message}")
                    }
                }
            }
        }
        
        stage('üìä Test 1: Get Session Statistics') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 1: Gathering session statistics..."
                    echo "=" * 60
                    
                    try {
                        def stats = keycloakAudit.getSessionStatistics(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM
                        )
                        
                        echo "‚úÖ Session statistics retrieved"
                        echo "\nüìä Session Statistics:"
                        echo "   Active sessions: ${stats.activeSessions}"
                        echo "   Offline sessions: ${stats.offlineSessions}"
                        echo "   Total clients: ${stats.totalClients}"
                        echo "   Sessions per client:"
                        
                        stats.clientSessions?.take(5)?.each { client ->
                            echo "      - ${client.clientId}: ${client.active} active"
                        }
                    } catch (Exception e) {
                        error("‚ùå Failed to get statistics: ${e.message}")
                    }
                }
            }
        }
        
        stage('üìã Test 2: List Active Sessions') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 2: Listing all active sessions..."
                    echo "=" * 60
                    
                    try {
                        def sessions = keycloakSession.listActiveSessions(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            max: 50
                        )
                        
                        echo "‚úÖ Active sessions retrieved"
                        echo "   Total active sessions: ${sessions.size()}"
                        
                        if (sessions.size() > 0) {
                            echo "\n   Sample sessions:"
                            sessions.take(5).each { session ->
                                echo "   - Session ID: ${session.id}"
                                echo "     User: ${session.username}"
                                echo "     Started: ${session.start}"
                                echo "     IP: ${session.ipAddress}"
                                // echo "     Clients: ${session.clients?.join(', ')}"
                                echo ""
                            }
                        }
                    } catch (Exception e) {
                        error("‚ùå Failed to list sessions: ${e.message}")
                    }
                }
            }
        }
        
        stage('üë§ Test 3: List User Sessions') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 3: Listing sessions for specific user..."
                    echo "=" * 60
                    
                    try {
                        // Try to get sessions for admin user (more likely to have sessions)
                        def adminUsers = keycloakUser.listUsers(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            max: 1
                        )
                        
                        if (adminUsers.size() > 0) {
                            def testUserId = adminUsers[0].id
                            
                            def userSessions = keycloakSession.listUserSessions(
                                keycloakUrl: env.KC_URL_INTERNAL,
                                accessToken: env.ACCESS_TOKEN,
                                realm: params.REALM,
                                userId: testUserId
                            )
                            
                            echo "‚úÖ User sessions retrieved"
                            echo "   User: ${adminUsers[0].username}"
                            echo "   Active sessions: ${userSessions.size()}"
                            
                            if (userSessions.size() > 0) {
                                userSessions.each { session ->
                                    echo "\n   Session Details:"
                                    echo "      Session ID: ${session.id}"
                                    echo "      Started: ${session.start}"
                                    echo "      Last access: ${session.lastAccess}"
                                    echo "      IP: ${session.ipAddress}"
                                }
                            } else {
                                echo "   ‚ÑπÔ∏è  No active sessions for this user"
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è  Warning: ${e.message}"
                        echo "   (This is expected if no users have active sessions)"
                    }
                }
            }
        }
        
        stage('üîç Test 4: Detect Session Anomalies') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 4: Detecting session anomalies..."
                    echo "=" * 60
                    
                    try {
                        def anomalies = keycloakAudit.detectAnomalies(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            maxSessionAgeDays: 7,
                            suspiciousIPPatterns: ['10.0.0.*', '192.168.*']
                        )
                        
                        echo "‚úÖ Anomaly detection completed"
                        echo "\n‚ö†Ô∏è Anomalies Found: ${anomalies.size()}"
                        
                        if (anomalies.size() > 0) {
                            anomalies.take(5).each { anomaly ->
                                echo "\n   üî¥ ${anomaly.type}"
                                echo "      Session ID: ${anomaly.sessionId}"
                                echo "      User: ${anomaly.username}"
                                echo "      Issue: ${anomaly.description}"
                                echo "      Age: ${anomaly.ageInDays} days"
                            }
                        } else {
                            echo "\n   ‚úÖ No anomalies detected"
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è  Warning: ${e.message}"
                        echo "   (Anomaly detection may not find issues in test environment)"
                    }
                }
            }
        }
        
        stage('‚è±Ô∏è Test 5: Find Long-Running Sessions') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 5: Finding long-running sessions..."
                    echo "=" * 60
                    
                    try {
                        def longSessions = keycloakSession.findLongRunningSessions(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            thresholdDays: 7
                        )
                        
                        echo "‚úÖ Long-running sessions analysis completed"
                        echo "   Sessions running > 7 days: ${longSessions.size()}"
                        
                        if (longSessions.size() > 0) {
                            echo "\n   Long-running sessions:"
                            longSessions.take(5).each { session ->
                                echo "   - ${session.username}: ${session.ageInDays} days"
                                echo "     Session ID: ${session.id}"
                            }
                        } else {
                            echo "   ‚úÖ No long-running sessions found"
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è  Warning: ${e.message}"
                    }
                }
            }
        }
        
        stage('üóëÔ∏è Test 6: Revoke User Sessions (Test User)') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 6: Testing session revocation..."
                    echo "=" * 60
                    
                    try {
                        // Revoke sessions for our test user (won't have any, but tests the endpoint)
                        keycloakSession.revokeUserSessions(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            userId: env.TEST_USER_ID
                        )
                        
                        echo "‚úÖ Session revocation successful"
                        echo "   User: ${env.TEST_USERNAME}"
                        echo "   All sessions for this user have been revoked"
                        
                    } catch (Exception e) {
                        error("‚ùå Failed to revoke sessions: ${e.message}")
                    }
                }
            }
        }
        
        stage('üìä Test 7: Generate Session Report') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 7: Generating session management report..."
                    echo "=" * 60
                    
                    try {
                        def report = keycloakAudit.generateSessionReport(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            format: 'json',
                            includeAnomalies: true,
                            maxSessionAgeDays: 7
                        )
                        
                        // Save report
                        writeFile file: "session-report-${BUILD_NUMBER}.json", text: report
                        
                        echo "‚úÖ Session report generated"
                        echo "   File: session-report-${BUILD_NUMBER}.json"
                        
                        // Archive
                        archiveArtifacts artifacts: "session-report-${BUILD_NUMBER}.json", fingerprint: true
                        
                        echo "\n   Report includes:"
                        echo "   - Active session count"
                        echo "   - Session statistics by client"
                        echo "   - Detected anomalies"
                        echo "   - Long-running sessions"
                        
                    } catch (Exception e) {
                        error("‚ùå Failed to generate report: ${e.message}")
                    }
                }
            }
        }
        
        stage('üóëÔ∏è Test 8: Cleanup') {
            steps {
                script {
                    echo "=" * 60
                    echo "TEST 8: Cleaning up test user..."
                    echo "=" * 60
                    
                    try {
                        keycloakUser.deleteUser(
                            keycloakUrl: env.KC_URL_INTERNAL,
                            accessToken: env.ACCESS_TOKEN,
                            realm: params.REALM,
                            userId: env.TEST_USER_ID
                        )
                        
                        echo "‚úÖ Test user deleted"
                        echo "\n‚úÖ All test resources cleaned up"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Cleanup warning: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "\n" + "=" * 60
            echo "‚úÖ ALL TESTS PASSED"
            echo "=" * 60
            echo "\nSession Management Integration Tests Summary:"
            echo "‚úÖ Get session statistics"
            echo "‚úÖ List active sessions"
            echo "‚úÖ List user sessions"
            echo "‚úÖ Detect session anomalies"
            echo "‚úÖ Find long-running sessions"
            echo "‚úÖ Revoke user sessions"
            echo "‚úÖ Generate session report"
            echo "‚úÖ Cleanup"
            echo "\nüéâ Keycloak Session Management is fully functional!"
            echo "\nüìä Report available: session-report-${BUILD_NUMBER}.json"
        }
        failure {
            echo "\n" + "=" * 60
            echo "‚ùå TESTS FAILED"
            echo "=" * 60
            echo "\n‚ö†Ô∏è  Check the logs above for details"
        }
        always {
            script {
                echo "\nTest completed at: ${new Date()}"

                // Clean sensitive data
                env.ACCESS_TOKEN = null

                env.TEST_USER_ID = null
                env.TEST_USERNAME = null
            }
        }
    }
}
