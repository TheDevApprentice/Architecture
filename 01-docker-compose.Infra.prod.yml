services:
  # Reverse proxy / gateway (Traefik)
  traefik:
    build:
      context: ./server/Traefik
      dockerfile: Dockerfile
    image: traefik:custom-v2.11
    ports:
      - "80:80"
      # - "8080:8080"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - proxy
    restart: unless-stopped

  # Homepage
  homepage:
    build:
      context: ./server/Homepage
      dockerfile: Dockerfile
    container_name: homepage:latest
    networks:
      - proxy
    restart: unless-stopped
    # Limites de ressources optimisées pour homepage
    deploy:
      resources:
        limits:
          cpus: '1.0'     # Limite à 1 CPU au maximum
          memory: 512M    # Limite à 512MB de mémoire (suffisant pour homepage)
        reservations:
          cpus: '0.2'     # Garantit au minimum 20% d'un CPU
          memory: 256M    # Garantit au minimum 256MB de mémoire
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.rule=PathPrefix(`/dashboard`)"
      - "traefik.http.routers.homepage.entrypoints=web"
      - "traefik.http.routers.homepage.service=homepage"
      - "traefik.http.services.homepage.loadbalancer.server.port=3000"
      - "traefik.docker.network=proxy"

  # TURN/STUN server (coturn)
  turn:
    build:
      context: ./server/Turn
      dockerfile: Dockerfile
    image: turn:latest
    ports:
      - "3478:3478/udp"
      - "3478:3478"
      - "49160-49200:49160-49200/udp"
    environment:
      # REQUIRED: Set to your public IP or DNS-resolved IP of this host for NAT hairpin correctness
      - COTURN_PUBLIC_IP=${COTURN_PUBLIC_IP:-127.0.0.1}
      - COTURN_REALM=${COTURN_REALM:-local}
      - COTURN_USER=${COTURN_USER:-devuser}
      - COTURN_PASS=${COTURN_PASS:-devpass}
    restart: unless-stopped
    networks:
      - proxy

  minio:
    build:
      context: ./server/Minio
      dockerfile: Dockerfile
    image: minio:latest
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=adminadmin123
      # - S3_BUCKET=bucket
      # - S3_BUCKETS=bucket1,bucket2
      # - MINIO_PUBLIC=true
    volumes:
      - minio_data:/data
    restart: unless-stopped
    networks:
      - proxy
      - stornet
    labels:
      - "traefik.enable=true"
      # Route /minio -> MinIO S3 API (HTTP)
      - "traefik.http.routers.minio.rule=PathPrefix(`/minio`)"
      - "traefik.http.routers.minio.entrypoints=web"
      - "traefik.http.routers.minio.service=minio"
      - "traefik.http.routers.minio.middlewares=minio-strip"
      - "traefik.http.middlewares.minio-strip.stripprefix.prefixes=/minio"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio.priority=100"
      - "traefik.docker.network=proxy"

  redis:
    build:
      context: ./server/Redis
      dockerfile: Dockerfile
    image: redis:latest
    environment:
      # Set a strong password here (dev example)
      REDIS_PASSWORD: changeme
    volumes:
      - redis_data:/data
    networks:
      - proxy
      - cachenet
    restart: unless-stopped
    # No Traefik labels here: Redis is TCP on 6379 (not HTTP). Keep it internal.

volumes:
  traefik_data:
  redis_data:
  minio_data:

networks:
  proxy:
    name: proxy
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/24
  dbnet:
    name: dbnet
    ipam:
      driver: default
      config:
        - subnet: 172.31.10.0/24
  cachenet:
    name: cachenet
    ipam:
      driver: default
      config:
        - subnet: 172.31.20.0/24
  stornet:
    name: stornet
    ipam:
      driver: default
      config:
        - subnet: 172.31.30.0/24